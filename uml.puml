@startuml
class main.game.boss.sprite.AlienBossSpriteAction {
- ImageView spriteImage
- Queue<Double> positions
+ <<Create>> AlienBossSpriteAction(String,int,int,String,int,int,int)
+ void followPlayer(double)
+ void recordPlayerPosition(double)
- void initializeSprite()
- void startAnimation()
- void updateSprite()
+ ImageView getSpriteImage()
+ boolean isColliding(ThrowingAxe)
}
class main.game.boss.sprite.CentipedeBossSpriteAction {
- ImageView spriteImage
- Queue<Double> positions
+ <<Create>> CentipedeBossSpriteAction(String,int,int,String,int,int,int)
+ void followPlayer(double)
+ void recordPlayerPosition(double)
- void initializeSprite()
- void startAnimation()
- void updateSprite()
+ ImageView getSpriteImage()
+ boolean isColliding(ThrowingAxe)
}
class main.game.item.Axe {
+ <<Create>> Axe(String,int)
}
enum main.game.State {
+  START
+  FIRST
+  SECOND
+  THIRD
+  FOURTH
+  GAMEOVER
+  WIN
}
class main.game.character.Character {
- Sprite sprite
- MovementBehavior movementBehavior
- JumpBehavior jumpBehavior
- Image jumpingImage
- Image walkingImage
- Item equippedItem
- ThrowingAxe throwingAxe
- long lastThrowTime
- long throwCooldown
- boolean canThrowAxe
- boolean isJumping
- int health
- long lastHitTime
- long hitCooldown
+ <<Create>> Character(String,String)
+ MovementBehavior getMovementBehavior()
+ void equipItem(Item)
+ void throwAxe(double,boolean,BossSpriteAction,Stage)
- void checkThrowCooldown()
+ void hitByBoss(int,Stage)
+ Sprite getSprite()
+ void setSprite(Sprite)
+ void jump()
+ void setMovingLeft(boolean)
+ void setMovingRight(boolean)
+ void setMovingDown(boolean)
+ void update()
+ void setWalkingSprite()
+ int getHealth()
+ void setHealth(int)
+ int getDamage()
}
class main.game.character.sprite.JumpingSprite {
- {static} int FRAME_WIDTH
- {static} int FRAME_HEIGHT
- {static} int ANIMATION_LENGTH
+ <<Create>> JumpingSprite(Image)
+ void updateSprite()
+ Rectangle2D getFrameViewPort()
}
class main.game.item.ThrowingAxe {
- Sprite sprite
- double throwingSpeed
- double axeWidth
- double axeHeight
+ <<Create>> ThrowingAxe(String,int)
+ Sprite getSprite()
+ void setSprite(Sprite)
+ double getThrowingSpeed()
}
abstract class main.game.character.sprite.Sprite {
# int currentFrame
# {static} long FRAME_DURATION_NS
# long lastFrameUpdateNs
+ <<Create>> Sprite(Image)
+ {abstract}void updateSprite()
+ {abstract}Rectangle2D getFrameViewPort()
+ int getCurrentFrame()
+ void setCurrentFrame(int)
+ long getLastFrameUpdateNs()
+ void setLastFrameUpdateNs(long)
}
class main.game.character.movement.CharacterJump {
- {static} double GRAVITY
- double velocityY
- boolean isJumping
- long lastJumpTimeNs
- {static} long JUMP_COOLDOWN_NS
- {static} double JUMP_HEIGHT
- Sprite sprite
+ <<Create>> CharacterJump(Sprite)
+ Sprite getSprite()
+ void setSprite(Sprite)
+ void setLastJumpTimeNs(long)
+ void setJumping(boolean)
+ void setVelocityY(double)
+ void jump()
+ boolean isJumping()
+ void update()
- boolean onGround()
}
class main.game.boss.sprite.BigBloatedBossSpriteAction {
- ImageView spriteImage
- Queue<Double> positions
+ <<Create>> BigBloatedBossSpriteAction(String,int,int,String,int,int,int)
+ void followPlayer(double)
+ void recordPlayerPosition(double)
- void initializeSprite()
- void startAnimation()
- void updateSprite()
+ ImageView getSpriteImage()
+ boolean isColliding(ThrowingAxe)
}
class main.game.item.sprite.ThrowingAxeSprite {
- double width
- double height
+ <<Create>> ThrowingAxeSprite(Image,double,double)
+ void updateSprite()
+ Rectangle2D getFrameViewPort()
}
interface main.game.boss.sprite.BossSpriteAction {
~ void followPlayer(double)
~ void recordPlayerPosition(double)
~ boolean isColliding(ThrowingAxe)
~ ImageView getSpriteImage()
~ int getHealth()
~ void setHealth(int)
}
interface main.game.character.movement.JumpBehavior {
~ void jump()
~ boolean isJumping()
~ void update()
}
class main.game.character.movement.CharacterMovement {
- {static} int WIDTH
- {static} int HEIGHT
- double speed
- boolean movingLeft
- boolean movingRight
- boolean movingUp
- boolean movingDown
- Sprite sprite
+ <<Create>> CharacterMovement(Sprite)
+ boolean isMovingLeft()
+ Sprite getSprite()
+ void setSprite(Sprite)
+ void setMovingLeft(boolean)
+ void setMovingRight(boolean)
+ void setMovingDown(boolean)
+ void moveLeft()
+ void moveRight()
+ void moveUp()
+ void moveDown()
+ void update()
}
interface main.game.character.movement.MovementBehavior {
~ void moveLeft()
~ void moveRight()
~ void moveUp()
~ void moveDown()
~ void update()
}
class main.game.ui.HealthBar {
- {static} String HP_LABEL_STYLE
- ProgressBar progressBar
- Label nameLabel
- Label hpLabel
- int maxHp
- int currentHp
+ <<Create>> HealthBar(String,int,Color)
- ProgressBar createProgressBar(Color)
- Label createNameLabel(String)
- Label createHpLabel()
- void configureLayout()
+ void update(int)
- void updateLabels()
+ ProgressBar getProgressBar()
- String toHex(Color)
}
class main.game.character.sprite.WalkingSprite {
- {static} int FRAME_WIDTH
- {static} int FRAME_HEIGHT
- {static} int ANIMATION_LENGTH
- {static} int xOffset
+ <<Create>> WalkingSprite(Image)
+ void updateSprite()
+ Rectangle2D getFrameViewPort()
}
class main.game.App {
- {static} int WIDTH
- {static} int HEIGHT
- {static} Scene scene
- {static} Character character
+ {static} State currentState
- {static} MediaPlayer startMediaPlayer
- {static} MediaPlayer fightMediaPlayer
- {static} MediaPlayer axeMediaPlayer
- {static} MediaPlayer winMediaPlayer
- {static} MediaPlayer loseMediaPlayer
- {static} HealthBar characterHealthBar
- {static} HealthBar bossHealthBar
+ {static} AlienBossSpriteAction alienBoss
+ {static} BigBloatedBossSpriteAction bigBoss
+ {static} CentipedeBossSpriteAction centipedeBoss
+ {static} TrollBossSpriteAction trollBoss
- {static} AnimationTimer gameLoop
+ void start(Stage)
- {static} void showStartPage(Stage)
- {static} int findImageIndex(String,String[])
+ {static} void initGame(Stage)
+ {static} void main(String[])
- {static} void showGameOverPage(Stage)
- {static} void showWinPage(Stage)
+ {static} void spawnBoss(Stage)
+ {static} void endGame(Stage)
- {static} boolean isCollidingWithBoss(BossSpriteAction)
- {static} void playAxeSound()
+ {static} void setCurrentState(State)
}
abstract class main.game.item.Item {
- String name
- int value
+ <<Create>> Item(String,int)
+ String getName()
+ int getValue()
}
class main.game.boss.sprite.TrollBossSpriteAction {
- ImageView spriteImage
- Queue<Double> positions
+ <<Create>> TrollBossSpriteAction(String,int,int,String,int,int,int)
+ void followPlayer(double)
+ void recordPlayerPosition(double)
- void initializeSprite()
- void startAnimation()
- void updateSprite()
+ ImageView getSpriteImage()
+ boolean isColliding(ThrowingAxe)
}
abstract class main.game.boss.Boss {
- String name
- int health
- int damage
- ImageView spriteImage
- int currentFrame
- int FRAME_WIDTH
- int FRAME_HEIGHT
- int ANIMATION_LENGTH
- int DELAY_FRAMES
- long lastTurnTime
- long turnDelay
+ <<Create>> Boss(String,int,int,int,int,int)
+ String getName()
+ void setName(String)
+ int getHealth()
+ int getDamage()
+ void setHealth(int)
+ void setDamage(int)
+ ImageView getSpriteImage()
+ void setSpriteImage(ImageView)
+ int getCurrentFrame()
+ void setCurrentFrame(int)
+ int getAnimationLength()
+ void setAnimationLength(int)
+ int getDELAY_FRAMES()
+ long getLastTurnTime()
+ void setLastTurnTime(long)
+ long getTurnDelay()
+ int getFRAME_WIDTH()
+ void setFRAME_WIDTH(int)
+ int getFRAME_HEIGHT()
+ void setFRAME_HEIGHT(int)
+ int getANIMATION_LENGTH()
+ void setANIMATION_LENGTH(int)
}


main.game.boss.sprite.BossSpriteAction <|.. main.game.boss.sprite.AlienBossSpriteAction
main.game.boss.Boss <|-- main.game.boss.sprite.AlienBossSpriteAction
main.game.boss.sprite.BossSpriteAction <|.. main.game.boss.sprite.CentipedeBossSpriteAction
main.game.boss.Boss <|-- main.game.boss.sprite.CentipedeBossSpriteAction
main.game.item.Item <|-- main.game.item.Axe
main.game.character.sprite.Sprite <|-- main.game.character.sprite.JumpingSprite
main.game.item.Axe <|-- main.game.item.ThrowingAxe
javafx.scene.image.ImageView <|-- main.game.character.sprite.Sprite
main.game.character.movement.JumpBehavior <|.. main.game.character.movement.CharacterJump
main.game.boss.sprite.BossSpriteAction <|.. main.game.boss.sprite.BigBloatedBossSpriteAction
main.game.boss.Boss <|-- main.game.boss.sprite.BigBloatedBossSpriteAction
main.game.character.sprite.Sprite <|-- main.game.item.sprite.ThrowingAxeSprite
main.game.character.movement.MovementBehavior <|.. main.game.character.movement.CharacterMovement
javafx.scene.layout.StackPane <|-- main.game.ui.HealthBar
main.game.character.sprite.Sprite <|-- main.game.character.sprite.WalkingSprite
javafx.application.Application <|-- main.game.App
main.game.boss.sprite.BossSpriteAction <|.. main.game.boss.sprite.TrollBossSpriteAction
main.game.boss.Boss <|-- main.game.boss.sprite.TrollBossSpriteAction
@enduml